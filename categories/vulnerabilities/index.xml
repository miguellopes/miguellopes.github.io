<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vulnerabilities on miguellopes.net</title>
    <link>https://miguellopes.net/categories/vulnerabilities/</link>
    <description>Recent content in Vulnerabilities on miguellopes.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2010 - 2023, Miguel Lopes; all rights reserved.</copyright>
    <lastBuildDate>Tue, 19 Sep 2023 22:37:13 +0000</lastBuildDate><atom:link href="https://miguellopes.net/categories/vulnerabilities/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Serialization: Understanding and Mitigating Risks</title>
      <link>https://miguellopes.net/blog/java-serialization/</link>
      <pubDate>Tue, 19 Sep 2023 22:37:13 +0000</pubDate>
      
      <guid>https://miguellopes.net/blog/java-serialization/</guid>
      <description>In the vast world of Java applications, serialization and deserialization play a pivotal role. At a glance, these processes seem straightforward. Serialization is the art of turning an object into a byte stream, while deserialization brings that byte stream back to life as an object. But beneath this simplicity lies a maze of potential security pitfalls.
The Intricacies of Serialization Vulnerabilities When we talk about serialization in Java, we&amp;rsquo;re referring to the transformation of an object into a sequence of bytes.</description>
    </item>
    
  </channel>
</rss>
